# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
.swiftpm

.build/
chatgpt/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Project specific
bin/
dist/
tmp_iconset.iconset/

# Build artifacts
build.log
*.bak
*.backup
Package.swift.bak

# Test and debug scripts (temporales)
*_test.sh
test_*.sh
test_*.py
*_debug.sh
fix_*.sh
detect_*.sh
find_*.sh
verify_*.sh
analyze_*.swift
monitor_*.sh
view_*.sh
run_swift_with_env.sh

# Session-specific documentation
RESUMEN_SESION_*.md
test_results_*.md
*_OLD.sh

# Temporary Package files
Package_*.swift
!Package.swift

# Cleanup script (one-time use)
cleanup_sensitive_files.sh
LIMPEZA_PROYECTO.md

# =====================
# Sensitive / local config
# =====================
# Dotenv files (keep only templates like .env.example tracked)
.env
.env.*
!.env.example
.envrc

# Generic local secrets
*.local
*.secret
*.secrets
Secrets.*
**/Secrets*.plist
Config/Secrets*.plist

# Certificates & credentials
*.pem
*.key
*.p12
*.pfx
*.cer
*.crt
*.der
*.mobileprovision
*.provisionprofile

# Logs & crash reports
*.log
logs/
*.crash

# Local databases & caches
*.sqlite
*.sqlite-shm
*.sqlite-wal
*.db
*.realm
*.realm.lock
*.realm.management
.swiftlint_cache
.swiftlint.cache
.swiftformat.tmp

# Coverage & profiling artifacts
*.xccoverage
.coverage/
*.profraw
*.profdata
*.gcno
*.gcda

# Editor / IDE metadata
.vscode/
.idea/
*.iml
*.swp
*.swo
*~

# Environment/Dev tools
.direnv/
.venv/
venv/
.tox/
